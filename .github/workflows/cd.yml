name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  AWS_S3_REGION: ${{ secrets.AWS_S3_REGION }}
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}

jobs:
  create-env:
    name: Setup Environment
    runs-on: ubuntu-latest
    environment: ${{ vars.ENV }}
    steps:
      - uses: actions/checkout@v4
      - name: Create .env.${{ vars.SPRING_PROFILES_ACTIVE }}
        run: |
          cat <<EOF > .env.${{ vars.SPRING_PROFILES_ACTIVE }}
          SPRING_PROFILES_ACTIVE=${{ vars.SPRING_PROFILES_ACTIVE }}
          POSTGRES_DB=${{ vars.POSTGRES_DB }}
          POSTGRES_USER=${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          ...
          EOF
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: env-${{ vars.SPRING_PROFILES_ACTIVE }}
          path: .env.${{ vars.SPRING_PROFILES_ACTIVE }}

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: create-env
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: maven
      - id: get-version
        run: echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}
          tags: |
            ${{ vars.SPRING_PROFILES_ACTIVE }}-${{ steps.get-version.outputs.version }}-latest
      - uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  deploy:
    name: Deploy to VPS
    if: github.event.workflow_run.head_branch == 'main' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    environment: ${{ vars.ENV }}
    needs: build
    env:
      APP_IMAGE: ${{ needs.build.outputs.image-tag }}
      PROFILE: ${{ vars.SPRING_PROFILES_ACTIVE }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: env-${{ vars.SPRING_PROFILES_ACTIVE }}
      - uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          source: "docker-compose.yml,docker-compose.prod.yml,.env.${{ vars.SPRING_PROFILES_ACTIVE }}"
          target: ~/minimart-api/
      - uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          envs: APP_IMAGE,PROFILE
          script: |
            cd ~/minimart-api
            echo "Login Docker Hub..."
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ vars.DOCKER_USERNAME }}" --password-stdin
            docker pull "$APP_IMAGE"
            docker-compose --env-file .env.$PROFILE -f docker-compose.yml -f docker-compose.prod.yml down -v
            docker-compose --env-file .env.$PROFILE -f docker-compose.yml -f docker-compose.prod.yml up -d
