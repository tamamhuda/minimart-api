name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  create-env:
    name: Setup Environment
    runs-on: ubuntu-latest
    environment: ${{ vars.ENV }}
    steps:
      - uses: actions/checkout@v4
      - name: Create .env.${{ vars.ENV }} file
        run: |
          cat <<EOF > .env.${{ vars.ENV }}
          SPRING_PROFILES_ACTIVE=${{ vars.SPRING_PROFILES_ACTIVE }}
          APP_PORT=${{ vars.APP_PORT }}
          APP_NAME=${{ vars.APP_NAME }}

          POSTGRES_DB=${{ vars.POSTGRES_DB }}
          POSTGRES_USER=${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_PORT=${{ vars.POSTGRES_PORT }}
          DATABASE_URL=${{ vars.DATABASE_URL }}

          JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          JWT_ACCESS_EXPIRATION_IN_MINUTES=${{ vars.JWT_ACCESS_EXPIRATION_IN_MINUTES }}
          JWT_REFRESH_EXPIRATION_IN_DAYS=${{ vars.JWT_REFRESH_EXPIRATION_IN_DAYS }}

          AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          AWS_S3_REGION=${{ vars.AWS_S3_REGION }}
          AWS_S3_BUCKET=${{ vars.AWS_S3_BUCKET }}

          XENDIT_SECRET_KEY=${{ secrets.XENDIT_SECRET_KEY }}
          XENDIT_VERIFICATION_TOKEN=${{ secrets.XENDIT_VERIFICATION_TOKEN }}
          XENDIT_SUCCESS_URL=${{ vars.XENDIT_SUCCESS_URL }}
          XENDIT_FAILURE_URL=${{ vars.XENDIT_FAILURE_URL }}

          REDIS_HOST=${{ vars.REDIS_HOST }}
          REDIS_PORT=${{ vars.REDIS_PORT }}
          REDIS_DB=${{ vars.REDIS_DB }}
          REDIS_KEY_PREFIX=${{ vars.REDIS_KEY_PREFIX }}
          REDIS_ADDRESS=${{ vars.REDIS_ADDRESS }}

          MAILTRAP_TOKEN=${{ secrets.MAILTRAP_TOKEN }}
          MAILTRAP_SENDER_EMAIL=${{ secrets.MAILTRAP_SENDER_EMAIL }}
          MAILTRAP_TEMPLATE_VERIFICATION_EMAIL_ID=${{ secrets.MAILTRAP_TEMPLATE_VERIFICATION_EMAIL_ID }}
          MAILTRAP_TEMPLATE_VERIFICATION_URL=${{ vars.MAILTRAP_TEMPLATE_VERIFICATION_URL }}

          TOTP_GLOBAL_SECRET=${{ secrets.TOTP_GLOBAL_SECRET }}
          TOTP_EXPIRY_IN_MINUTES=${{ vars.TOTP_EXPIRY_IN_MINUTES }}
          EOF

      - name: Upload .env.${{ vars.ENV }} artifact
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: env-${{ vars.ENV }}
          path: .env.${{ vars.ENV }}

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    environment: ${{ vars.ENV }}
    needs: create-env
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: maven

      - name: Get Maven Project Version
        id: get-version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get Maven Project Name
        id: get-name
        run: |
          PROJECT_NAME=$(mvn help:evaluate -Dexpression=project.name -q -DforceStdout)
          SAFE_NAME=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g')
          echo "name=$SAFE_NAME" >> $GITHUB_OUTPUT

      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/${{ steps.get-name.outputs.name }}
          tags: |
            ${{ vars.SPRING_PROFILES_ACTIVE }}-${{ steps.get-version.outputs.version }}-latest
      

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download .env.${{ vars.ENV }}
        uses: actions/download-artifact@v4
        with:
          name: env-${{ vars.ENV }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: |
            PROFILE=${{ vars.SPRING_PROFILES_ACTIVE }}
          file: Dockerfile
          context: .
          provenance: true
          sbom: true

  deploy:
    name: Deploy to VPS
    if: github.event.workflow_run.head_branch == 'main' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    environment: ${{ vars.ENV }}
    needs: build
    env:
      APP_IMAGE: ${{ needs.build.outputs.image-tag }}
      PROFILE: ${{ vars.SPRING_PROFILES_ACTIVE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download .env.${{ vars.ENV }}
        uses: actions/download-artifact@v4
        with:
          name: env-${{ vars.ENV }}

      - name: Copy Docker Compose files and env to VPS
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          source: "docker-compose.yml,docker-compose.prod.yml,.env.${{ vars.ENV }}"
          target: ~/minimart-api/

      - name: Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          envs: APP_IMAGE,PROFILE
          script: |
            cd ~/minimart-api
            echo "Login Docker Hub..."
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ vars.DOCKER_USERNAME }}" --password-stdin
            docker pull "$APP_IMAGE"
            docker-compose --env-file .env.$PROFILE -f docker-compose.yml -f docker-compose.prod.yml down -v
            docker-compose --env-file .env.$PROFILE -f docker-compose.yml -f docker-compose.prod.yml up -d
